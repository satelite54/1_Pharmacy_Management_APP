package view;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonBar;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import model.DBConnect;
import model.Medicine;
import model.CPage;
import model.CSingelton;

public class CatalogController implements Initializable {
	@FXML
	private Label ManagerOrViewer;

	@FXML
	private TableView<Medicine> tbCatalog;
	@FXML
	private TableColumn<Medicine, String> tbname;
	@FXML
	private TableColumn<Medicine, String> tbimage;
	@FXML
	private TableColumn<Medicine, String> tbchar;
	@FXML
	private TableColumn<Medicine, String> tbeffect;
	@FXML
	private TableColumn<Medicine, String> tbwarning;
	@FXML
	private TableColumn<Medicine, Date> tbexpirition;
	@FXML
	private TableColumn<Medicine, String> tbcompany;
	@FXML
	private TableColumn<Medicine, Integer> tbprice;
	@FXML
	private TableColumn<Medicine, Integer> tbstock;
	@FXML
	private Label CatalogManager;
	@FXML
	private ButtonBar Catalogbtnbar;
	@FXML
	private Button CDelete;
	@FXML
	private Button CExit;
	@FXML
	private Button goExpirition;

	CSingelton mov = CSingelton.getInstance();

    @FXML
    private Label label1;

    @FXML
    private ImageView imgCatal;

	// Event Listener on Button[#goExpirition].onAction
    @FXML
    void Exit(ActionEvent event) {
    	CExit.getScene().getWindow().hide();
    }

	@FXML
	public void goExpiritionbtn(ActionEvent event) {
		// TODO Autogenerated
        // 원하는 실행문
 	   Stage stage = new Stage();
 	   String FXMLRout = "../view/Mdate.fxml";
 	   try {
 		CPage page = new CPage();
		page.CreatePage(stage, FXMLRout);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	DBConnect conn = new DBConnect();
	Connection connect;

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		tbCatalog.setOnMouseClicked(new EventHandler<MouseEvent>() {
		    @Override
		    public void handle(MouseEvent event) {
		    	imgCatal.setImage(new Image(mov.AryList2.get(tbCatalog.getSelectionModel().getSelectedIndex())));
		    }
		  });

		if(mov.getManagerOrViewer() == 1) {
			ManagerOrViewer.setText("로그인 정보 : 관리자");
		}
		else {
			ManagerOrViewer.setText("로그인 정보 : 열람자");
		}
		showMedicine();
		tbCatalog.getSelectionModel().selectedItemProperty().addListener(
				// 테이블 안의 내용중 행이 하나의 Book객체이고 다른 행을 선택(마우스 클릭시)
				// 그 전 행과 다를경우 이벤트 발생하고 showBookDetails 를 실행한다.
				(Observable,oldValue,newValue) -> showBookDetails(newValue)
				);
	}

	public ObservableList<Medicine> getMList() {
		connect = conn.getConnection();
		ObservableList<Medicine> medicineList = FXCollections.observableArrayList();
		String sql = "SELECT * FROM Medicine";

		Statement stmt; // DB에 보낼 쿼리 객체. => SQL 문을 DB에 보냄. (객체 선언만)

		ResultSet rs; // DB에서 받아오는 결과. (객체 선언만)

		try {
			stmt = connect.createStatement(); // 쿼리 객체 생성. CONN 에서 연결만 후 createStatement 에서 생성해준 후 //
			rs = stmt.executeQuery(sql); // 접속 된 DB에서 쿼리를 실행하고 결과를 리턴 //
			// 결과를 한 행식 읽어서 bookList 에서 입력

			Medicine medicine;
			while (rs.next()) {
				mov.AryList2.add(rs.getString("image"));
				medicine = new Medicine(rs.getString("name"), rs.getString("image"), rs.getString("character"),
						rs.getString("effect"), rs.getString("warning"), rs.getString("company"),
						rs.getDate("expiration"), rs.getInt("price"), rs.getInt("stock")); // DB 의 북스테이블에 있는 열이름
				medicineList.add(medicine); // 북리스트에 하나의 book 객체를 입력한다.
			}

		} catch (Exception e) {
			// 에러 발생 시
			System.out.println("DB에서 SQL문을 실행 불가" + e);
		}
		return medicineList;
	}

	public void showMedicine() {
		ObservableList<Medicine> list = getMList();
		// 테이블뷰에 리스트를 넣고
		tbCatalog.setItems(list);
		// 각각의 열에 데이터를 불러오는 코드를 작성
		tbname.setCellValueFactory(new PropertyValueFactory<Medicine, String>("name"));
		tbimage.setCellValueFactory(new PropertyValueFactory<Medicine, String>("image"));
		tbchar.setCellValueFactory(new PropertyValueFactory<Medicine, String>("character"));
		tbeffect.setCellValueFactory(new PropertyValueFactory<Medicine, String>("effect"));
		tbwarning.setCellValueFactory(new PropertyValueFactory<Medicine, String>("warning"));
		tbcompany.setCellValueFactory(new PropertyValueFactory<Medicine, String>("company"));
		tbexpirition.setCellValueFactory(new PropertyValueFactory<Medicine, Date>("expiration"));
		tbprice.setCellValueFactory(new PropertyValueFactory<Medicine, Integer>("price"));
		tbstock.setCellValueFactory(new PropertyValueFactory<Medicine, Integer>("stock"));
	}

	@FXML
	void OMPon(MouseEvent event) {

	}

	private void showBookDetails(Medicine medicine) { //<== newValue 는 books 의 객체
		if(medicine != null) {
			//널 값이 아닐때
			label1.setText(medicine.getName());
		}
		else {
			//널 값일 때 => 모든 tf의 내용을 지운다.
			label1.setText("");
		}
	}

    @FXML
    void DeleteTuple(ActionEvent event) {
    	deleteRow();
    	showMedicine();
    }
    public void deleteRow() {
    	String sql = "DELETE Medicine where name= ?"; // ID 만 조회를 함.
    	String test = label1.getText();
    	Connection connect = conn.getConnection(); // DB 를 연결시켜주는 객체
    	PreparedStatement pstmt; // 쿼리 객체 선언 (pstmt 는 ? 사용가능)
    	// PreparedStatement 는 stmt 와 다른점은 ? 를 넣을수있다.

    	try {
    		pstmt = connect.prepareStatement(sql);

    		pstmt.setNString(1, label1.getText()); // ID == 숫자

    		// 입력 준비 됨.
    		pstmt.executeUpdate(); // 리턴 값이 없을 경우에 업데이트
    		connect.commit(); // 입력하고 commit 한다.
    	} catch (Exception e) {
    		System.out.println("업데이트 중  에러발생!");
    	}
	}
}
